/* The error is thrown using the throw statements and handled using try...catch block */
/* Throw Statement: Used to throw an exception.Specifies the value to be thrown.
        Different examples are :        */ 
        throw "Errored Out";
        throw 24;
        throw {toString: function() { return "I'm an object!"; } };

        function UserException(message) {
            this.message = message;
            this.name = 'UserException';
          }
          
          // Make the exception convert to a pretty string when used as a string 
          // (e.g., by the error console)
          UserException.prototype.toString = function() {
            return `${this.name}: "${this.message}"`;
          }
          
          // Create an instance of the object type and throw it
          throw new UserException('Value too high');

/* Try...Catch :
        The try..catch statement consists of try block and catch block.If any exception is returned
        from the try block,it is caught by the catch block and if all the statements of the try 
        block is passed successfully,catch block is skipped successfully.*/

        // Check with Sridhar
        function getMonthName(mo) {
            console.log("nnnnnnnn",mo);
            mo = mo - 1; // Adjust month number for array index (1 = Jan, 12 = Dec)
            console.log("nnnnnnnn",mo);
            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
                          'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            if (months[mo]) {
              return months[mo];
            } else {
              throw 'InvalidMonthNo'; // throw keyword is used here
            }
          }
          
          logMyErrors=(e)=>{
            console.log("Error Occurred");
          }
          
          try { // statements to try
            console.log("mYMonth",myMonth);
            monthName = getMonthName(3); // function could throw exception
          }
          catch (e) {
            monthName = 'unknown';
            logMyErrors(e); // pass exception object to error handler (i.e. your own function)
          }

// Simplest example:           
          try {
            throw 'myException'; // generates exception
          }
          catch (err) {
            console.log(err);    //handles the error.
          }
/* When logging the errors ,it is advised to use console.error() instead of console.log()
   as it formats the message as error and adds it to the list of error messages generated by page. */
   
/* Finally Block : Executed after execution is done from the try...catch block. If the fnally 
            returns any value that value becomes the return value of the entire try..catch production.
            For example: */
            function f() {
                try {
                  console.log(0);
                  throw 'bogus';
                } catch(e) {
                  console.log(1);
                  return true;    // this return statement is suspended
                                  // until finally block has completed
                  console.log(2); // not reachable
                } finally {
                  console.log(3);
                  return false;   // overwrites the previous "return"
                  console.log(4); // not reachable
                }
                // "return false" is executed now  
                console.log(5);   // not reachable
              }
              console.log(f()); // 0, 1, 3, false 
            
            /*The overwriting of the return values happen in case of exceptions thrown or 
               re-thrown inside of catch block. For example: */
               function f() {
                try {
                  throw 'bogus';
                } catch(e) {
                  console.log('caught inner "bogus"');
                  throw e; // this throw statement is suspended until 
                           // finally block has completed
                } finally {
                  return false; // overwrites the previous "throw"
                }
                // "return false" is executed now
              }
              
              try {
                console.log(f());
              } catch(e) {
                // this is never reached! 
                // while f() executes, the `finally` block returns false, 
                // which overwrites the `throw` inside the above `catch`
                console.log('caught outer "bogus"');
              }
              
              // OUTPUT
              // caught inner "bogus"
              // false
/* N.B:
    1. In case of nesting of try-catch block please keep in mind below things:
              a. It must contain finally block
              b. Enclosing try...catch statement's catch block is checked for a match.
    2.  Depending on the error we may modify the name and message properties of error to get 
            refined message.If we are trying to throw our own error,for that we can use the 
            Error constructor.For example: */
            
            // Check with Sridhar
            function errorFunction(){
                if(errorOccured()){
                    throw new Error('Error has occured')
                }
                else{
                    evrythingIsFine();
                }
            }
            try{
                errorFunction()
            }catch(err){
                console.error(err.name);
                console.error(err.message)
            }